# 백준 - 브론즈3 - 신기한 수 - 17618 - 구현, 완전 탐색 문제
'''
구현, 완전 탐색 문제

PyPy3로 제출해야 통과할 수 있다.

신기한 수를 구하는 방식은 문제 본문에 있다. 
- 만약 11이라는 수가 있으면 각 글자들의 합은 2가 된다. 근데, 11 % 2는 0이 아니므로 신기한 수가 아니다.
- 이러한 방식으로 숫자를 문제로 바꾼 후, 그 합이 검사하고 싶은 수로 나누어떨어지면 res를 1증가하는 방식으로 문제를 풀면 된다.
- n이 10이하면 모두 신기한 수가 되므로 n을 그대로 출력한다.

문제를 풀고 보니 Python3으로 푼 사람들의 코드를 보는데 신기했다. 그 코드는 맞힌 사람으로 들어가 python으로 필터를 걸면 확인할 수 있다.
'''

n = int(input())

# 테스트
# n = 9 # 9
# n = 21 # 14

res = 0

if n < 10:
    print(n)
    exit(0)

for i in range(1, n + 1):
    magic_number = sum(map(int, str(i)))

    if i % magic_number == 0:
        res += 1

print(res)
