# 백준 - 실버4 - 3D Printing - 25089 - 그리디 문제
'''
그리디 문제

질문 게시판의 해당 문제를 해석해준 분이 있어 풀 수 있었다. (번역기를 사용해도 이해가 어려웠다.)
    - 해석 링크 - https://www.acmicpc.net/board/view/144711
결국 이 문제의 핵심은 문제는 '세 프린터의 잉크량을 고려하여 총 잉크 사용량이 1,000,000이 되는 색상 조합'을 찾는 것이다.
    - 문제 해석글에 있는 중요한 내용 (샘플 케이스 3번 같은 경우 c가 1, m이 107471, y가 178147, k가 714381 이어도 정답, 총합이 100만)
    - 이 부분이 내 코드와 입력 예제의 출력 결과가 서로 달라 고민이 되었던 부분이었다. (해석글의 도움으로 제출하니 통과)

풀이 과정
    1. t를 입력받는다.
    2. t만큼 반복한다.
    3. temp를 int(1e6)으로 초기화한다.
    4. res를 0으로 초기화한다.
    5. printers를 입력받는다.
    6. 4개의 값 중 가장 작은 값을 res에 넣는다.
    7. temp에서 res를 빼준다.
    8. temp가 0보다 크다면 IMPOSSIBLE을 출력한다.
    9. temp가 0보다 작다면 res를 출력한다.

in
    3
    300000 200000 300000 500000
    300000 200000 500000 300000
    300000 500000 300000 200000
    1000000 1000000 0 0
    0 1000000 1000000 1000000
    999999 999999 999999 999999
    768763 148041 178147 984173
    699508 515362 534729 714381
    949704 625054 946212 951187
out
    Case #1: 300000 200000 300000 200000
    Case #2: IMPOSSIBLE
    Case #3: 400001 100002 100003 399994
        내 코드에선: Case #3: 699508 148041 152451 0 (이렇게 나와도 정답)
'''

t = int(input())
for i in range(1, t + 1):
    temp = int(1e6)  # 필요한 총 잉크량
    res = [0] * 4    # 각 색상의 잉크 사용량 초기화
    printers = [list(map(int, input().split())) for _ in range(3)]  # 프린터의 잉크량 입력받기

    for j in range(4):
        # 각 색상의 최소 잉크량과 남은 필요 잉크량 중 작은 값을 선택
        res[j] = min(printers[0][j], printers[1][j], printers[2][j], temp)
        temp -= res[j]  # 남은 필요 잉크량 갱신

    if temp > 0:
        print(f'Case #{i}: IMPOSSIBLE')  # 필요한 잉크량을 충족할 수 없음
    else:
        print(f'Case #{i}: {" ".join(map(str, res))}')  # 각 색상의 잉크 사용량 출력
