'''
그리디, 수학 문제
기타줄 브랜드 입력을 잘 받은 후에,
해당 브랜드 별로 패키지로 샀을 때 가장 싼 가격, 낱개로 샀을 경우 가장 싼 가격을 정하고
낱개를 6개로 샀을 때와 패키지 1개 샀을 때 가격을 비교하고,
위와 같은 방식으로 최저값을 구하면 된다.
'''

n, m = map(int, input().split())
m_list = [ list(map(int, input().split())) for _ in range(m) ] # 기타줄 브랜드 가격 입력 받기
# print(n, m, m_list)

# 테스트
# n, m, m_list = 4, 2, [[12, 3], [15, 4]] # 12
# n, m, m_list = 10, 3, [[20, 8], [40, 7], [60, 4]] # 36
# n, m, m_list = 15, 1, [[100, 40]] # 300
# n, m, m_list = 17, 1, [[12, 3]] # 36
# n, m, m_list = 7, 2, [[10, 3], [12, 2]] # 12
# n, m = 9, 16
# m_list = [[21, 25], [77, 23], [23, 88], [95, 43],
#           [96, 19], [59, 36], [80, 13], [51, 24],
#           [15, 8], [25, 61], [21, 22], [3, 9],
#           [68, 68], [67, 100], [83, 98], [96, 57]] # 6

res = 0

package = sorted(m_list, key=lambda x: x[0])[0][0] # 6줄 패키지 중 가장 싼 가격
piece = sorted(m_list, key=lambda x: x[1])[0][1] # 낱개 중 가장 싼 가격

if package <= piece * 6: # 낱개 6줄 보다 패키지로 사는게 더 쌀 경우
    res = package * (n // 6) + piece * (n % 6) # 기타줄이 얼마나 필요할지 계산

    if package < piece * (n % 6): # 낱개로 나머지를 사는거보다 6줄 패키지로 샀을 경우에 더 쌀 경우
        res = package * (n // 6 + 1)
else: # 낱개로 사는게 더 쌀 경우
    res = piece * n

print(res)
