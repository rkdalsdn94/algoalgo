# 백준 - 실버4 - 스위치와 램프 - 16960 - 구현, 완전 탐색 문제
"""
구현, 완전 탐색 문제

[핵심 아이디어]
    - 램프별 연결 개수 파악: 각 램프가 몇 개의 스위치와 연결되어 있는지 미리 계산
    - 스위치 제거 시뮬레이션: N개의 스위치를 하나씩 '제거'하는 상황을 가정
    - 램프 켜짐 여부 검증: 제거된 스위치에 연결된 램프들 중, 해당 스위치에만 연결된 램프가 하나라도 있는지 확인
    - 전체 검증: 만약 그런 램프가 하나도 없다면, 해당 스위치를 제거해도 모든 램프가 켜질 수 있다는 의미

[풀이 과정]
    1. lamp_count 배열을 사용하여 각 램프가 몇 개의 스위치와 연결되어 있는지 계산한다.
    2. for 반복문을 통해 0번부터 N−1번까지 각 스위치를 하나씩 제외한다.
    3. 특정 스위치 i를 제외했을 때, 이 스위치에 연결된 램프들을 모두 확인한다.
    4. 확인하는 램프의 lamp_count가 1이라면, 이 램프는 오직 스위치 i에만 연결된 것이므로 i를 제외하면 켜지지 않음
        따라서, 이 경우는 불가능하므로 다음 스위치로 넘어갑니다.
    5. 만약 스위치 i에 연결된 모든 램프들이 lamp_count가 2 이상이라면,
        스위치 i를 제외해도 모든 램프가 켜질 수 있습니다. 1을 출력하고 프로그램을 종료한다.
    6. 모든 스위치를 제거해 보았는데도 켜질 수 있는 경우가 없었다면, 0을 출력
"""

n, m = map(int, input().split())
n_list = [list(map(int, input().split())) for _ in range(n)]

# 테스트
# n, m = 4, 5
# n_list = [[3, 1, 3, 5], [1, 2], [3, 3, 4, 5], [1, 1]] # 1
# n, m = 4, 5
# n_list = [[2, 1, 3], [1, 2], [2, 3, 4], [2, 3, 5]] # 0
# n, m = 10, 1
# n_list = [
#     [1, 1], [0], [0], [0], [0], [0], [0], [0], [0], [1, 1]
# ] # 1


# 각 램프가 몇 개의 스위치와 연결되어 있는지 카운트
lamp_count = [0] * (m + 1)
for switch_info in n_list:
    for lamp_id in switch_info[1:]:
        lamp_count[lamp_id] += 1

# 각 스위치를 하나씩 제외하며 검증
for i in range(n):
    # i+1번 스위치를 제외한다고 가정
    is_removable = True

    # 제외한 스위치에 연결된 램프들을 확인
    for lamp_id in n_list[i][1:]:
        # 만약 이 램프가 유일하게 제외한 스위치에만 연결되어 있었다면
        if lamp_count[lamp_id] == 1:
            is_removable = False
            break

    # 모든 램프가 여전히 켜질 수 있다면 (is_removable이 True라면)
    if is_removable:
        print(1)
        exit(0)

# 모든 스위치를 제외해 봐도 모든 램프를 켤 수 없다면
print(0)
