# 백준 - 실버4 - 바닥 장식 - 1388 - 구현, 그래프, bfs 문제
'''
구현, 그래프, bfs 문제

dfs로도 풀 수 있는거 같은데 여기 코드에선 bfs로 풀었다. (나중에 dfs -> bfs, bfs -> dfs 바꿔봐야겠다.)

풀이 과정.
1. 입력값들을 잘 입력 받고, bfs를 몇 번 실했는지 확인하고 해당 값을 출력할 때 사용할 res를 만든다.
2. 기본 방향을 설정하기 위해 direction 딕셔너리를 만든다.
    2.1 '-' 면 행(0, 1)으로 한 칸, '|'면 열(1, 0)로 한 칸 이동할 수 있게 value를 설정했다.
3. 입력으로 받은 n과 m의 크기만큼 반복문을 실행한다.
    3.1 board가 1로 되지 않았으면 현재 반복중인 i, j값을 인자로 넣고 bfs를 실행한다.
        3.1.1 인자로 들어온 (x, y)를 q에 담고, 해당 board의 글자를 word에 담는다. 방문했다는 표시를 남기기 위해 현재 board의 값을 1로 바꾼다.
        3.1.2 q에서 x, y를 꺼내면서 해당 글자의 방향을 갖고 board의 크기를 벗어나지 않고, 글자가 연속적으로 나온다면 계속해서 q에 담아준다.
        3.1.2 q에 담으면서 word의 글자와 방문했다는 표시를 남겨준다.
        3.1.3 bfs를 실행할 때마다 res를 1씩 증가 해준다.
4. bfs가 몇 번 실행됐는지 res를 출력한다.
'''

from collections import deque

n, m = map(int, input().split())
board = [ list(input()) for _ in range(n) ]

# 테스트
# n, m = 4, 4
# board = [ ['-','-','-','-'], ['-','-','-','-'],
#         ['-','-','-','-'], ['-','-','-','-'] ] # 4
# n, m = 6, 9
# board = [
#     ['-','|','|','-','-','|','|','-','-'],
#     ['-','-','|','|','-','-','|','|','-'],
#     ['|','-','-','|','|','-','-','|','|'],
#     ['|','|','-','-','|','|','-','-','|'],
#     ['-','|','|','-','-','|','|','-','-'],
#     ['-','-','|','|','-','-','|','|','-']
# ] # 31
# n, m = 7, 8
# board = [
#     ['-','-','-','-','-','-','-','-'],
#     ['|','-','-','-','-','-','-','|'],
#     ['|','|','-','-','-','-','|','|'],
#     ['|','|','|','-','-','|','|','|'],
#     ['|','|','-','-','-','-','|','|'],
#     ['|','-','-','-','-','-','-','|'],
#     ['-','-','-','-','-','-','-','-']
# ] # 13
# n, m = 10, 10
# board = [
#     ['|','|','-','|','|','-','|','|','|','-'],
#     ['|','|','-','-','|','|','|','|','|','|'],
#     ['-','|','-','|','|','|','|','|','|','|'],
#     ['-','|','-','|','|','-','|','|','-','|'],
#     ['|','|','-','-','|','-','|','|','|','|'],
#     ['|','|','|','|','|','|','-','|','|','-'],
#     ['|','-','|','|','|','|','|','|','|','|'],
#     ['|','|','|','|','|','|','|','|','|','|'],
#     ['|','|','-','-','-','|','-','-','|','|'],
#     ['-','|','|','-','|','|','|','|','|','|']
# ] # 41
# n, m = 6, 6
# board = [
#     ['-','|','|','-','-','|'],
#     ['|','|','|','|','|','|'],
#     ['|','|','|','-','|','-'],
#     ['-','|','|','|','|','-'],
#     ['|','|','|','|','-','|'],
#     ['|','|','-','|','|','-']
# ] # 19

res = 0
direction = { '-': [(0, 1)], '|': [(1, 0)] }

def isValid(x, y):
    return True if 0 <= x < n and 0 <= y < m else False

def bfs(x, y):
    q = deque([(x, y)])
    word = board[x][y]
    board[x][y] = 1

    while q:
        a, b = q.popleft()

        for i, j in direction[word]:
            nx, ny = i + a, j + b

            if isValid(nx, ny) and word == board[nx][ny]:
                q.append([nx, ny])
                word = board[nx][ny]
                board[nx][ny] = 1

for i in range(n):
    for j in range(m):
        if board[i][j] != 1:
            bfs(i, j)
            res += 1

print(res)
