# 백준 - 브론즈1 - 골드 러시 - 10275 - 수학, 구현 문제
'''
[문제 분류]
수학, 구현 문제

[핵심 아이디어]
    금괴를 원하는 크기로 나누기 위해서는 각 목표 무게를 2의 거듭제곱의 합으로 분해해야 한다.
    이는 이진법 표현과 직결되며, 필요한 조각의 개수는 a와 b의 이진법 표현에서 1의 개수의 합과 같다.

[풀이 과정]
    1. 처음에는 2^n 크기의 금괴 1개가 있다
    2. 매일 하나의 조각을 정확히 반으로 자를 수 있다
    3. k일 후에는 최대 k+1개의 조각을 만들 수 있다
    4. a를 만들기 위해 필요한 조각 수 = a의 이진법 표현에서 1의 개수 (popcount)
    5. b를 만들기 위해 필요한 조각 수 = b의 이진법 표현에서 1의 개수 (popcount)
    6. 총 필요한 조각 수 = popcount(a) + popcount(b)
    7. 답 = 총 필요한 조각 수 - 1 (처음에 1개가 있으므로)

ex)
    - a=1000 → 1111101000₂ → 1의 개수 6개
    - b=24 → 11000₂ → 1의 개수 2개
    - 총 조각 수: 6 + 2 = 8개
    - 필요한 일수: 8 - 1 = 7일
'''

def popcount(n):
    """n의 이진법 표현에서 1의 개수를 반환"""
    return bin(n).count('1')

# 테스트 케이스 개수 입력
t = int(input())

for _ in range(t):
    # n, a, b 입력 (a + b = 2^n)
    n, a, b = map(int, input().split())

    # a와 b의 이진법 표현에서 1의 개수를 각각 구함
    bits_a = popcount(a)
    bits_b = popcount(b)

    # 총 필요한 조각 수에서 1을 뺀 것이 답
    res = bits_a + bits_b - 1

    print(res)
