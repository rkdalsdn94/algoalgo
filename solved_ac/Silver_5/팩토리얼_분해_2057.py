# 백준 - 실버3 - 팩토리얼 분해 - 2057 - 수학, 그리디, 완전 탐색 문제
"""
수학, 그리디, 완전 탐색 문제

[핵심 아이디어]
    1. 큰 팩토리얼부터 확인하면서 현재 수를 분해하는 그리디 접근법 사용
    2. 미리 계산한 팩토리얼 값들을 내림차순으로 정렬해 큰 값부터 확인
    3. 중요: 0은 특별 케이스(0! = 1이므로 0은 다른 방법으로 표현 불가능)
    4. 각 팩토리얼은 한 번만 사용 가능(서로 다른 팩토리얼 조건)

[풀이 과정]
    1. 0부터 20까지의 팩토리얼 값을 미리 계산하여 저장
       (20!이 이미 10^18을 넘어가므로 문제 제한인 10^18 범위에서 충분함)
    2. 입력받은 수 N에 대해 예외 처리:
       - N이 0이면 서로 다른 팩토리얼의 합으로 표현 불가능 ('NO' 출력)
    3. 큰 팩토리얼부터 순회하면서:
       - N이 현재 팩토리얼보다 크거나 같으면 N에서 해당 팩토리얼 값을 뺌
    4. 최종적으로 N이 0이 되면 서로 다른 팩토리얼의 합으로 표현 가능, 아니면 불가능
"""

# 팩토리얼 값 계산 함수
def calculate_factorial(n):
    if n == 0:
        return 1
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

# 팩토리얼 값 미리 계산하여 저장 (0!부터 20!까지)
factorial_values = [calculate_factorial(i) for i in range(21)]

n = int(input())

# 테스트
# n = 5 # NO

# 0은 특별 케이스로 처리 (0! = 1이므로 0은 0!로 표현할 수 없음)
if n == 0:
    print("NO")
else:
    # 큰 팩토리얼부터 그리디하게 접근
    for i in range(20, -1, -1):
        if n >= factorial_values[i]:
            n -= factorial_values[i]

    # n이 0이 되었는지 확인 (모든 팩토리얼을 적절히 사용해 표현 가능한지)
    if n == 0:
        print("YES")
    else:
        print("NO")
