# 백준 - 실버3 - 품질검사 - 5600 - 구현 문제
'''
구현 문제

문제에 주어진 다음의 내용을 바탕으로 작동을 하는지 안하는 지 구현하면 된다.
- A, B, C 부품을 각각 하나씩 가져와 연결하고 작동시킨다.
- 모든 부품이 정상인 경우 기계가 정상 작동하여 "합격"
- 부품이 하나라도 고장 난 경우 기계가 오작동하여 "불합격"
- 부품들의 상태 값 0 : 고장, 1 : 정상 동작, 2: 알 수 없음

풀이 과정
 - 입력 과정을 잘 입력 받고, 정답으로 출력할 res list를 a + b + c 길이로 만들고 값은 2로 초기화 한다.
 - 검사 결과 리스트(n_list)의 검사 결과를 담고 있는 마지막 값을 기준으로 정렬 후 역순으로 반복문을 실행한다.
    - 검사 결과가 정상인 값이 정상이면 i, j, k 모든 값이 정상이므로 res 리스트의 해당 값을 정상이라는 표시를 남긴다 (1로 바꿈)
    - 정렬 후 반복문을 실행 것이므로 그 다음부턴 결과를 잘 모른다.
        - 따라서, i, j, k 의 값 중 두 값이 1이라면 나머지 하나의 값 때문에 결과가 0이 됐으므로 해당 인덱스의 값을 0으로 만든다.
    - 0으로 바꾸는 과정까지 다 진행하고 난 후, 출력하면 된다. (초기값이 2로 되어 있으므로 그냥 출력하면 된다.)
'''

a, b, c = map(int, input().split())
n = int(input())
n_list = [list(map(int, input().split())) for _ in range(n)]

# 테스트
# a, b, c = 2, 2, 2
# n = 4
# n_list = [[2, 4, 5, 0], [2, 3, 6, 0], [1, 4, 5, 0], [2, 3, 5, 1]] # 2  \  1  \  1  \  0  \  1  \  0

res = [2] * (a + b + c)

for i in sorted(n_list, key=lambda x: x[-1], reverse=True):
    i, j, k, r = i
    i, j, k = i - 1, j - 1, k - 1

    if r == 1: # 검사 결과가 '정상 동작'이라면
        res[i], res[j], res[k] = 1, 1, 1
    elif res[i] == 1 and res[j] == 1 and res[k] != 1:
        res[k] = 0
    elif res[i] == 1 and res[j] != 1 and res[k] == 1:
        res[j] = 0
    elif res[i] != 1 and res[j] == 1 and res[k] == 1:
        res[i] = 0

for i in res:
    print(i)
