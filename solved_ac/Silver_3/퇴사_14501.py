'''
dp문제
처음에 n_list를 앞으로 반복하면서 만들고 싶어서 여러 수를 사용해보다, --> (불가능 하진 않지만 메모리 낭비가 생긴다.)
뒤로 반복하는게 더 편해서 그 방법을 사용했다.
max값을 어떻게 해야되는지 잘 고민하면 된다.
dp[현재] = max( P[현재] + dp[현재 + Ti], dp[현재 + 1] ) --> (현재 + 1값은 반복문이 뒤에서부터 시작이니까 dp값이 뒤에서부터 갱신돼서 이다.)
'''
# n = int(input())
# n_list = [ list(map(int, input().split())) for _ in range(n) ]
# print(n, n_list)

# 테스트
# n, n_list = 7, [[3, 10], [5, 20], [1, 10], [1, 20], [2, 15], [4, 40], [2, 200]] # 45
# n, n_list = 10, [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10]] # 55
# n, n_list = 10, [[5, 10] ,[5, 9] ,[5, 8] ,[5, 7] ,[5, 6] ,[5, 10] ,[5, 9] ,[5, 8] ,[5, 7] ,[5, 6]] # 20
n, n_list = 10, [[5, 50], [4, 40], [3, 30], [2, 20], [1, 10], [1, 10], [2, 20], [3, 30], [4, 40], [5, 50]] # 90

dp = [0] * (n + 1)

for i in range(n - 1, -1, -1):
    if i + n_list[i][0] <= n: # Ti + i가 n보다 크면 어차피 퇴사한 뒤라 상담을 못한다.
        dp[i] = max(n_list[i][1] + dp[i + n_list[i][0]], dp[i + 1])
    else: dp[i] = dp[i + 1] # 상담할 수는 값이 오면 이 전의 dp값을 현재로 만들어 줘야 한다. ex) 3, [[100, 1], [1, 2], [1, 5]]일때 여기 부분이 없으면 0으로 제출된다.

print(dp[0])

