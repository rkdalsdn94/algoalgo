# 백준 - 실버3 - 평행 우주 - 17451 - 수학, 그리디 문제
'''
수학, 그리디 문제

일단 이 문제를 풀때 문제 본문 중 개인적으로 중요하다 느껴지는 부분은 아래와 같다
- 지구를 벗어나면 속도를 떨어뜨릴 수 있을 뿐 높일 수는 없다.
- 다행히도 평행 우주는 일정한 간격을 두고 있기 때문에 필요한 속도의 양의 정수 배로도 다음 지역으로 이동할 수 있다.

위에 두 가지 사항을 가지고 구현을 해보자
행성으로 가야되는 속드를 미리 알고 있기 때문에 행성 리스트에서 가장 먼 거리에 있는 즉, 리스트의 마지막부터 시작해야 된다.
마지막까지 가야할 비용을 res에 담아주면서, res가 현재 행성 속도의 보다 작거나 같으면 res를 현재 행성의 속도로 바꿔준다.
res가 현재 행성까지 가야하는 속도보다 클 경우 양의 정수 배수인지 검사한다. ( res % n_list[i] -> 나머지가 없으면 즉, 0이면 배수이다. 반대면 배수가 아니다.)
 - 검사하는 이유는 위에서 적어놓은 2번째 사유면 즉, 정수 배수이면 값을 바꿀 필요가 없다.
배수이면 넘어가고 배수가 아니면 res 값보다 크도록 하면서(몫 연산의 + 1, ceil을 사용해도 됨) i 행성의 속도의 양의 배수로 만들어 준다
'''

n = int(input())
n_list = list(map(int, input().split()))

# 테스트
# n = 5
# n_list = [300, 400, 500, 400, 300] # 900

res = 0

for i in range(n - 1, -1, -1):
    if res <= n_list[i]:
        res = n_list[i]
    else:
        if res % n_list[i]:
            res = (res // n_list[i] + 1) * n_list[i]

print(res)
