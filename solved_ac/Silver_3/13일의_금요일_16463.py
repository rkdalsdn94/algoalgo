# 백준 - 실버3 - 13일의 금요일 - 16463 - 구현, 완전 탐색, 시뮬레이션 문제
'''
구현, 완전 탐색, 시뮬레이션 문제

day % 7로 요일을 계산하는 방법은 다음과 같다.
1 시작 기준일 설정
    - day 변수를 13으로 초기화합니다.
    - 이는 2019년 1월 13일을 기준으로 계산을 시작한다는 의미입니다.
    - 2019년 1월 13일은 일요일입니다.
2. 요일 인덱스 계산
    - day % 7은 누적된 일수를 7로 나눈 나머지를 구합니다.
    - 이는 0부터 6까지의 값이 나오며, day_week 리스트의 인덱스로 사용됩니다.
    - 예를 들어, day = 13일 때 13 % 7 = 6이며, day_week[6] = '일'이므로 일요일입니다.
3. 월별로 누적 일수 증가
    - 각 월마다 day에 그 달의 일수를 더해 누적합니다.
    - 이렇게 하면 다음 달의 13일까지의 총 누적 일수를 계산할 수 있습니다.
    - 이 과정에서 day는 매월 13일의 누적 일수를 나타냅니다.
4. 요일 확인
    - 각 월의 13일에 대해 day % 7을 계산하여 요일을 확인합니다.
    - 만약 그 요일이 '금'이라면 (day_week[day % 7] == '금'), 금요일인 13일이므로 카운트를 증가시킵니다.

풀이 과정
    1. n을 입력받는다.
    2. res를 0으로 초기화한다.
    3. day_month, day_week를 만들어 각각의 값을 넣는다.
    4. day를 13으로 초기화한다.
    5. 2019년부터 n년까지 반복한다.
        5.1. 윤년인지 확인한다.
        5.2. 12개월을 돌면서 금요일인지 확인한다.
        5.3. 금요일이라면 res에 1을 추가한다.
    6. res를 출력한다.
'''

n = int(input())

# 테스트
# n = 2021 # 5
# n = 100000 # 168528

res = 0
day_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
day_week = ['월', '화', '수', '목', '금', '토', '일']
day = 13

for i in range(2019, n + 1):
    if (i % 4 == 0 and i % 100 != 0) or i % 400 == 0:
        day_month[1] = 29
    else:
        day_month[1] = 28

    for j in range(12):
        if day_week[day % 7] == '금':
            res += 1
        day += day_month[j]

print(res)
