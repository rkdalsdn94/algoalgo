'''
단순 구현 문제

문제에 주어진 식? 대로 코드로 옮기면 된다.
아스키 코드 상에서 소문자 a 는 97부터 시작한다.
그래서, a-z까지 입력 받았을 때 1-26 까지 사용하려고 입력받은 문자열에서 96을 뺏다.

출력할 때 % 1234567891를 하지 않으면 절반만 성공한다.
% 1234567891를 잘 해야된다.

---- 옛날에 '백준 - 01타일'이란 문제를 풀었을 때, 수가 커질수록 나머지 연산의 비용(시간)이 많이 발생한다고 한다.
       ㄴ-> 현재는 메모리 초과가 나오는거 같다.
현재 문제에선 최종 결과값에서만 나머지 연산해도 통과가 가능하다.
그래도, 안전하게 코딩하려면 반복문안에서 res += (ord(word[i]) - 96) * (31 ** i) % 1234567891 해주는 것이 좋다.

(python에선 정수 오버플로가 없다 ex. java는 int값이 -21억 ~ +21억의 수의 범위를 갖는다.)
'''

n, word = int(input()), input()

# 테스트
# n = 5
# word = 'abcde' # 4739715
# n = 3
# word = 'zzz' # 25818
# n = 1
# word = 'i' # 9

res = 0

for i in range(n):
    # res += (ord(word[i]) - 96) * (31 ** i)
    res += (ord(word[i]) - 96) * (31 ** i) % 1234567891

print(res % 1234567891)
