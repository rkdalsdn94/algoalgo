# 백준 - 브론즈2 - 대출 요청 - 16497 - 구현 문제
'''
구현 문제

n과 n_list 모두 입력이 얼마 되지 않아 완전 탐색 방식으로 풀어도 상관 없다.
n_list의 값들을 미리 32의 크기로 만든 res 배열의 1씩 더한다.
    32로 만든 이유는 문제 중 모든 날짜는 31보다 작거나 같은 자연수이기 때문이다.
res의 max값과 k를 비교한 뒤 k보다 작거나 같으면 1을 출력하고, 아니면 0을 출력하면 된다.

반납일은 대출이 가능한 날이다.. 이 부분을 착각해서 반납일까지 1을 더했다가 틀렸었다.
'''

n = int(input())
n_list = [list(map(int, input().split())) for _ in range(n)]
k = int(input())

# 테스트
# n = 3
# n_list = [[1, 2], [3, 6], [5, 8]]
# k = 1 # 0
# n = 3
# n_list = [[1, 2], [3, 4], [5, 8]]
# k = 1 # 1
# n = 3
# n_list = [[1, 2], [3, 6], [5, 8]]
# k = 2 # 1

res = [0] * 32
for i, j in n_list:
    for l in range(i, j): # 여기서 j + 1까지 했다가 틀렸었다...
        res[l] += 1

if max(res) <= k:
    print(1)
else:
    print(0)
