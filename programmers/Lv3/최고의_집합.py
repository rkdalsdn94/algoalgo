# 프로그래머스 - Lv3 - 최고의 집합 - 수학, 그리디 문제
"""
수학, 그리디 문제

[핵심 아이디어]
    합이 같을 때 숫자들이 비슷할수록 곱이 커진다는 원리를 활용
    예를 들어, 합이 10인 경우:
    - 1 + 9 = 10, 1 × 9 = 9
    - 2 + 8 = 10, 2 × 8 = 16
    - 3 + 7 = 10, 3 × 7 = 21
    - 4 + 6 = 10, 4 × 6 = 24
    - 5 + 5 = 10, 5 × 5 = 25
    즉, 숫자들이 가장 균등하게 분배될 때(5, 5) 곱이 최대가 됨

[풀이 과정]
    1. n개 자연수의 합이 s인 집합이 존재하는지 확인 (s < n이면 불가능)
    2. 기본값으로 모든 원소에 s를 n으로 나눈 몫을 할당
    3. 나머지를 배열의 뒤쪽 원소부터 1씩 더함
    4. 결과적으로 최대한 균등하게 분배된 오름차순 배열을 반환
"""

def solution(n, s):
    # 불가능한 경우
    if s < n:
        return [-1]

    quotient = s // n
    remainder = s % n
    answer = [quotient] * n

    # 나머지를 뒤쪽 원소부터 1씩 더하기
    for i in range(n - remainder, n):
        answer[i] += 1

    return answer

print(solution(2, 9) == [4, 5])
print(solution(2, 1) == [-1])
print(solution(2, 8) == [4, 4])
