# 프로그래머스 - Lv2 - 뒤에 있는 큰 수 찾기 - 자료 구조(스택) 문제
"""
자료 구조(스택) 문제

[핵심 아이디어]
    1. 스택을 활용하여 아직 뒷 큰수를 찾지 못한 숫자들의 인덱스를 저장
    2. 현재 숫자와 스택에 저장된 인덱스의 숫자를 비교하여 뒷 큰수 찾기
    3. 역방향 순회 대신 정방향 순회로 O(n) 시간 복잡도 달성

[풀이 과정]
    1. 결과 배열을 모두 -1로 초기화
    2. 배열을 순회하면서 스택에는 뒷 큰수를 아직 찾지 못한 숫자들의 인덱스 저장
    3. 현재 숫자가 스택의 top 인덱스의 숫자보다 크면, 현재 숫자가 top 인덱스 숫자의 뒷 큰수
    4. 조건을 만족하는 동안 스택에서 pop하고 결과 배열 업데이트
    5. 현재 인덱스를 스택에 push
    6. 모든 숫자를 순회한 후 스택에 남아있는 인덱스들은 뒷 큰수가 없으므로 -1 유지
"""

def solution(numbers):
    n = len(numbers)
    answer = [-1] * n
    stack = []

    for i in range(n):
        # 스택이 비어있지 않고, 현재 숫자가 스택 top 인덱스의 숫자보다 크면
        while stack and numbers[stack[-1]] < numbers[i]:
            # 스택에서 pop한 인덱스의 뒷 큰수는 현재 숫자
            answer[stack.pop()] = numbers[i]

        # 현재 인덱스를 스택에 추가
        stack.append(i)

    return answer

print(solution([2, 3, 3, 5]) == [3, 5, 5, -1])
print(solution([9, 1, 5, 3, 6, 2]) == [-1, 5, 6, 6, -1, -1])
