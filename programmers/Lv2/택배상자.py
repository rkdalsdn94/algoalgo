# 프로그래머스 - Lv2 - 택배상자 - 시뮬레이션, 자료구조(스택) 문제
"""
시뮬레이션, 자료구조(스택) 문제

[핵심 아이디어]
    1. 보조 컨테이너 벨트는 스택(LIFO) 구조로 동작함
    2. 주 컨테이너 벨트는 1부터 n까지 순서대로 상자가 나옴
    3. 각 단계마다:
       - 주 컨테이너 벨트에서 상자를 꺼내 보조 벨트에 넣음
       - 현재 필요한 순서의 상자가 보조 벨트 맨 위에 있다면 연속적으로 꺼내 트럭에 실음

[풀이 과정]
    1. 1부터 n까지 순서대로 처리(주 컨테이너 벨트에서 상자가 나오는 순서)
    2. 현재 상자를 보조 컨테이너 벨트(스택)에 넣음
    3. 보조 컨테이너 벨트의 맨 위 상자가 현재 트럭에 실어야 할 상자와 일치하면:
       - 그 상자를 꺼내어 트럭에 실음(answer 증가)
       - 다음 순서의 상자를 찾음(idx 증가)
       - 계속해서 보조 벨트의 맨 위 상자가 필요한 순서인지 확인하고 가능한 만큼 꺼냄
    4. 모든 상자를 처리한 후 트럭에 실은 상자 개수(answer) 반환
"""

def solution(order):
    answer = 0
    belt = []  # 보조 컨테이너 벨트(스택)
    idx = 0    # 현재 트럭에 실어야 할 상자의 인덱스

    for i in range(1, len(order) + 1):  # 1부터 n까지 주 컨테이너 벨트에서 나오는 상자
        belt.append(i)  # 현재 상자를 보조 벨트에 넣음

        # 보조 벨트의 맨 위 상자가 현재 필요한 상자인 동안 계속 꺼내어 트럭에 실음
        while belt and belt[-1] == order[idx]:
            answer += 1  # 트럭에 실은 상자 개수 증가
            idx += 1     # 다음으로 필요한 상자 인덱스로 이동
            belt.pop()   # 보조 벨트에서 상자 제거

    return answer

print(solution([4, 3, 1, 2, 5])) # 2
print(solution([5, 4, 3, 2, 1])) # 5
