# 프로그래머스 - Lv2 - PCCP 기출문제 3번 아날로그 시계 - 구현 문제
'''
구현 문제

코드에 주석을 통해 설명을 달아놨따. 코드에 있는 주석을 참고하면 된다.
'''

def solution(h1, m1, s1, h2, m2, s2):
    answer = 0

    # 초로 계산하기 위해
    a = (h1 * 3600) + (m1 * 60) + s1
    b = (h2 * 3600) + (m2 * 60) + s2

    if a == 0 or a == 12 * 3600:
        answer += 1

    while a < b:
        # 1시간(30도)을 기준으로 현재 시/분/초 침의 기울기 기울기 계산
        # 1시간 = 3600초, 3600초가 지났을 때 30도 기울어진다.
        # 즉, 1초에 기울어지는 정도는 3600 / 30 => 120
        # 전체 초 시간(a) / 120을 하면 1초에 기울어지는 정보를 알 수 있다.
        # 단, 360도가 한 바퀴이므로 넘어가면 360이 넘어가면 안되므로 나머지 연산을 해야 된다.
        # 분과 초는 둘다 6도씩 기울어 지는데, 초를 계산할 때는 곱해야 된다.
        # 이유는 1분에 6도씩 기울어지고, 초는 1초에 6도씩 기울어진다. (5초에 30도가 됨)
        # 위 설명이 너무 난잡해 정리가 잘 된 글을 참고하면 다음과 같다.
        '''
            # 시침 => 30도 도는데 3600초 걸림. 1초에 1/120도 만큼 회전
            # 분침 => 30도 도는데 300초 걸림. 1초에 1/10도 만큼 회전
            # 초침 => 30도 도는데 5초 걸림. 1초에 6도 회전
        '''
        current_h = a / 120 % 360
        current_m = a / 10 % 360
        current_s = a * 6 % 360

        # 위와 같이 1초가 지났을 때 시잠의 기울기 계산
        # 시 분 초 모두 59 -> 00 으로 될 때 0도가 되므로 0도일 땐 360으로 계산하기 위해 삼항 연산사용
        next_h = 360 if (a + 1) / 120 % 360 == 0 else (a + 1) / 120 % 360
        next_m = 360 if (a + 1) / 10 % 360 == 0 else (a + 1) / 10 % 360
        next_s = 360 if (a + 1) * 6 % 360 == 0 else (a + 1) * 6 % 360

        # 시침과 분침이 동시에 겹칠 때는 1번만 더해야 되므로 continue 사용
        if next_h == next_m == next_s:
            answer += 1
            a += 1
            continue
        # 위에서 구한 기울기를 기준으로 현재 초가 현재 분보다 작고, 다음 초침이 다음 분침의 기울기를 넘어가면 answer + 1
        if current_s < current_m and next_s >= next_m:
            answer += 1
        # 위와 똑같은데 시침을 넘어가는 기준
        if current_s < current_h and next_s >= next_h:
            answer += 1
        a += 1
    return answer

print(solution(0, 5, 30, 0, 7, 0)) # 2
print(solution(12, 0, 0, 12, 0, 30)) # 1
print(solution(0, 6, 1, 0, 6, 6)) # 0
print(solution(11, 59, 30, 12, 0, 0)) # 1
print(solution(11, 58, 59, 11, 59, 0)) # 1
print(solution(1, 5, 5, 1, 5, 6)) # 2
print(solution(0, 0, 0, 23, 59, 59)) # 2852
