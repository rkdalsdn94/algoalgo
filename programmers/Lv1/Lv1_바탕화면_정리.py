# 프로그래머스 - Lv1 - 바탕화면 정리 - 구현, 완전 탐색 문제
"""
구현, 완전 탐색 문제

[핵심 아이디어]
    1. 모든 파일('#')의 위치를 확인하여 파일들을 모두 포함하는 최소 직사각형 영역을 찾는다.
    2. 최소 직사각형의 왼쪽 위 좌표(lux, luy)와 오른쪽 아래 좌표(rdx, rdy)를 구한다.
    3. 파일 위치를 발견할 때마다 좌표 값을 갱신하여 최소/최대 값을 유지한다.
    4. 오른쪽 아래 좌표는 실제 파일 위치에서 +1을 해야 드래그가 해당 파일을 포함한다.

[풀이 과정]
    1. 초기 좌표값을 매우 크거나 작은 값으로 설정하여 비교 과정이 항상 작동하도록 한다.
       - lux, luy는 가능한 큰 값으로 초기화
       - rdx, rdy는 가능한 작은 값으로 초기화
    2. 2중 반복문으로 바탕화면의 모든 칸을 탐색한다.
    3. 파일('#')을 발견할 때마다:
       - lux = min(lux, 현재 행 인덱스)
       - luy = min(luy, 현재 열 인덱스)
       - rdx = max(rdx, 현재 행 인덱스 + 1)
       - rdy = max(rdy, 현재 열 인덱스 + 1)
    4. 모든 탐색이 끝나면 [lux, luy, rdx, rdy]를 반환한다.
"""

def solution(wallpaper):
    x, y = len(wallpaper), len(wallpaper[0])
    lux, luy, rdx, rdy = int(1e9), int(1e9), -int(1e9), -int(1e9)

    for i in range(x):
        for j in range(y):
            if wallpaper[i][j] != '.':
                lux, luy, rdx, rdy = min(lux, i), min(luy, j), max(rdx, i + 1), max(rdy, j + 1)

    return [lux, luy, rdx, rdy]

print(solution([".#...", "..#..", "...#."]) == [0, 1, 3, 4])
print(solution(["..........", ".....#....", "......##..", "...##.....", "....#....."]) == [1, 3, 5, 8])
print(solution([".##...##.", "#..#.#..#", "#...#...#", ".#.....#.", "..#...#..", "...#.#...", "....#...."]) == [0, 0, 7, 9])
print(solution(["..", "#."]) == [1, 0, 2, 1])
