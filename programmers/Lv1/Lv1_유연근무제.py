# 프로그래머스 - Lv1 - 유연근무제 - 구현 문제
"""
구현 문제

[핵심 아이디어]
    1. 출근 희망 시각에 10분을 더해 출근 인정 시각을 계산
    2. 이벤트 시작일을 기준으로 일주일간의 요일을 순차적으로 확인
    3. 평일(월~금)에는 출근 인정 시각보다 늦으면 탈락, 주말(토~일)에는 체크하지 않음
    4. for-else 구문을 활용해 모든 평일에 지각하지 않은 직원만 카운트

[풀이 과정]
    1. 각 직원별로 출근 희망 시각에 10분을 더한 출근 인정 시각을 계산
       - 분이 60 이상이 되면 시간을 +1 증가시키고 분을 조정
    2. 각 직원의 일주일간 출근 기록을 순회
       - 현재 요일이 주말(6, 7)이면 체크하지 않고 넘어감
       - 평일에는 출근 시간이 출근 인정 시각보다 늦으면 break로 탈락 처리
       - break가 발생하지 않으면 모든 평일에 정시 출근한 것이므로 else 구문이 실행됨
    3. 모든 평일에 지각하지 않은 직원 수 반환
"""

def solution(schedules, timelogs, startday):
    answer = 0
    n = len(schedules)

    for i in range(n):
        h = schedules[i] // 100
        m = schedules[i] % 100 + 10

        if m >= 60:
            m -= 60
            h += 1

        max_time = h * 100 + m
        day = startday

        for j in timelogs[i]:
            if day in [6, 7]:
                day = (day % 7) + 1
                continue

            if j > max_time:
                break

            day = (day % 7) + 1
        else:
            answer += 1

    return answer

timelogs = [
    [710, 2359, 1050, 700, 650, 631, 659],
    [800, 801, 805, 800, 759, 810, 809],
    [1105, 1001, 1002, 600, 1059, 1001, 1100]
]
print(solution([700, 800, 1100], timelogs, 5)) # 3

timelogs = [
    [710, 700, 650, 735, 700, 931, 912],
    [908, 901, 805, 815, 800, 831, 835],
    [705, 701, 702, 705, 710, 710, 711],
    [707, 731, 859, 913, 934, 931, 905]
]
print(solution([730, 855, 700, 720], timelogs, 1)) # 2
